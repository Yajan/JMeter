<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DSDeletionTest" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1513011115000</longProp>
        <longProp name="ThreadGroup.end_time">1513011115000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;
import org.openqa.selenium;
import org.openqa.selenium.firefox.FirefoxProfile;
import java.time.temporal.ChronoUnit;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;   
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import java.util.List;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
WebDriverWait wait= new WebDriverWait(WDS.browser,100);
WDS.sampleResult.sampleStart();

WDS.browser.get(&quot;https://app.mammoth.io/#/login&quot;);

wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;userEmail&quot;))).sendKeys(new String[] {&quot;deepak.merahkee@gmail.com&quot;});

wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;userPwd&quot;))).sendKeys(new String[] {&quot;merahkee@123&quot;});

login=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//button[@class=&apos;btn btn-mammoth&apos;]&quot;)));
start=LocalDateTime.now();
login.click();
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//section[@class=&apos;workspace ng-scope&apos;]&quot;)));
end=LocalDateTime.now();
Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
String Timestamp = Long.toString(minutesBetween);

WDS.log.info(&quot;Login: login = &quot;+Timestamp);
WDS.browser.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);  
  

WDS.sampleResult.sampleEnd();</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">beanshell</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;
import org.openqa.selenium;
import org.openqa.selenium.firefox.FirefoxProfile;
import java.time.temporal.ChronoUnit;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;   
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import org.testng.asserts.SoftAssert;
import java.util.List;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
WebDriverWait wait= new WebDriverWait(WDS.browser,100);
WDS.sampleResult.sampleStart();
TEN_SECONDS=13*1000;
WDS.browser.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS); 
oldTime=LocalDateTime.now();
start=LocalDateTime.now();
try{
while(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){

WDS.log.info(&quot;overlay is there&quot;);	
Long minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());
if(minutesBetween&gt;TEN_SECONDS){
WDS.navigate().refresh();
oldTimeAfterRefresh=LocalDateTime.now();
//again find overlay after refreshing
try{
while(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){
Long minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());
if(minutesBetween&gt;TEN_SECONDS){
break outerloop;
}
else {
WDS.log.info(&quot;Overlay is there&quot;);
}
}
}
catch(Exception e){
	WDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);	
	end=LocalDateTime.now();
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
	String Timestamp = Long.toString(minutesBetween);
	WDS.log.info(&quot;Login: Overlay = &quot;+Timestamp);
//Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.
}
}
}
WDS.log.info(&quot;Overlay is invisible now&quot;);
end=LocalDateTime.now();
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
	String Timestamp = Long.toString(minutesBetween);
	WDS.log.info(&quot;Login: Overlay = &quot;+Timestamp);
}
catch(Exception e){
	WDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);
	end=LocalDateTime.now();
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
	String Timestamp = Long.toString(minutesBetween);
	WDS.log.info(&quot;Login: Overlay = &quot;+Timestamp);
	break outerloop;
	}
WDS.sampleResult.sampleEnd();
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">beanshell</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;
import org.openqa.selenium;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import org.openqa.selenium.firefox.FirefoxProfile;
import java.time.temporal.ChronoUnit;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;   
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import org.testng.asserts.SoftAssert;
import java.util.List;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
WebDriverWait wait= new WebDriverWait(WDS.browser,100);
WDS.sampleResult.sampleStart();
try{
if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){
    welcomePage =WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]/h1&quot;));
    String mainText =welcomePage.getText().toString();
    WDS.log.info(&quot;its a fresh page, you can add data&quot;);
    wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//a[@class=&apos;by-file&apos;]&quot;))).click();
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//p[@class=&apos;btn btn-outline&apos;]&quot;))).click();
WDS.log.info(&quot;Dialog box&quot;);
Robot robot= new Robot();
robot.setAutoDelay(2000); 
filepath=&quot;C:\\Users\\Deepak\\Desktop\\MamothPerformanceTest\\scale_up_tests-master\\test_suites\\Test Files\\ColumnFunctionFile.csv&quot;;
StringSelection stringselection = new StringSelection(filepath);
Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringselection, null);

robot.setAutoDelay(1000);
WDS.log.info(&quot;Copy&quot;);
 robot.keyPress(KeyEvent.VK_CONTROL);
	  robot.keyPress(KeyEvent.VK_V);
WDS.log.info(&quot;release&quot;);
	  robot.keyRelease(KeyEvent.VK_CONTROL);
	  robot.keyRelease(KeyEvent.VK_V);
start=LocalDateTime.now();
WDS.log.info(&quot;enter press release&quot;);
	  robot.keyPress(KeyEvent.VK_ENTER);
	  robot.keyRelease(KeyEvent.VK_ENTER);
	  robot.setAutoDelay(1000);
end=LocalDateTime.now();
Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
String Timestamp = Long.toString(minutesBetween);
WDS.log.info(&quot;Login: Fileupload = &quot;+Timestamp);
Thread.sleep(1000);
}
}catch(Exception e)  
{  
WDS.log.info(&quot;No element&quot;);
WDS.log.info(&quot;Login: Fileupload = &quot;+&quot;No file upload&quot;);
} 
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">beanshell</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;
import org.openqa.selenium;
import org.openqa.selenium.support.ui.Select;
import java.awt.Robot;
import java.util.List;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.File;
import org.openqa.selenium.Keys;
import org.openqa.selenium.support.ui.FluentWait;
import java.time.temporal.ChronoUnit;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;   
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import java.io.FileReader;
import java.io.BufferedReader;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.StaleElementReferenceException;
import java.io.FileWriter;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.JavascriptExecutor;
import java.util.ArrayList;
import org.testng.asserts.SoftAssert;
import java.util.List;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;

WebDriverWait wait= new WebDriverWait(WDS.browser,100);
WDS.sampleResult.sampleStart();
Wait waitforallDS = new FluentWait(WDS.browser)
				.withTimeout(120, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(NoSuchElementException.class)
				.ignoring(StaleElementReferenceException.class);


for(int i =0;i&lt;5;i++){
	Actions actions = new Actions(WDS.browser);
	actions.keyDown(Keys.CONTROL).click(waitforallDS.until(ExpectedConditions.presenceOfAllElementsLocatedBy((By.xpath(&quot;//h5//span&quot;)))).get(i)).keyUp(Keys.CONTROL).build().perform();
	}
WDS.log.info(&quot;------------Multiple DS  has been selected to delete---------&quot;);
WDS.log.info(&quot;Now find selected item list section &quot;);

List selectedItemList=waitforallDS.until(ExpectedConditions.presenceOfAllElementsLocatedBy(By.xpath(&quot;//ul[@class=&apos;multi-select&apos;]/li&quot;)));

sizeOfSelectedDS= selectedItemList.size();
for(int j=0;j&lt;sizeOfSelectedDS;j++){
	if(j==selectedItemList.size()-1){
	WDS.browser.executeScript(&quot;arguments[0].scrollIntoView(true);&quot;,new Object[] {selectedItemList.get(j)});	  
}
}
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//div[contains(@class,&apos;btn btn-mammoth btn-sm&apos;)]&quot;))).click();
Thread.sleep(2000);
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//button[@class=&apos;btn btn-danger&apos;]&quot;))).click();
Thread.sleep(2000);
WDS.log.info(&quot;Delete  confirmation button clicked &quot;);

Wait  waitForDeletionMsgOnTop = new FluentWait(WDS.browser)
				.withTimeout(120, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(NoSuchElementException.class)
				.ignoring(StaleElementReferenceException.class);

start=LocalDateTime.now();
WebElement deleteDSMsg=	 waitForDeletionMsgOnTop.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div[contains(@class,&apos;ui-notification&apos;)]//div[contains(@class,&apos;message&apos;)]&quot;)));
String Msg =deleteDSMsg.getText().toString();
WDS.log.info(Msg);
end=LocalDateTime.now();
Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
String Timestamp = Long.toString(minutesBetween);
WDS.log.info(&quot;Login: Deletion = &quot;+Timestamp);

WDS.sampleResult.sampleEnd();</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">beanshell</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.FirefoxDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig" testname="jp@gc - Firefox Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="FirefoxDriverConfig.general.useragent.override.enabled">false</boolProp>
          <boolProp name="FirefoxDriverConfig.network.negotiate-auth.allow-insecure-ntlm-v1">false</boolProp>
          <collectionProp name="FirefoxDriverConfig.general.extensions"/>
          <collectionProp name="FirefoxDriverConfig.general.preferences"/>
        </com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
